import fnmatch

from . import errors


class RunResult(object):
    """Stores the results from running a command
    Attributes:
    :command: The command that was executed
    :cwd: Current working directory i.e. path where the command was executed
    :stdout: The standard output stream generated by the command
    :stderr: The standard error stream generated by the command
    :returncode: The return code set after invoking the command
    """

    def __init__(self, command, cwd, stdout, stderr, returncode):
        """Create a new RunResult object"""

        self.command = command
        self.cwd = cwd
        self.stdout = stdout
        self.stderr = stderr
        self.returncode = returncode

    def match(self, stdout=None, stderr=None):
        """Matches the lines in the output with the pattern. The match
        pattern can contain basic wildcards, see
        https://docs.python.org/2/library/fnmatch.html
        For convenience:
            +-----------------------------------------+
            |Pattern|Meaning                          |
            +-----------------------------------------+
            |*      |matches everything               |
            +-----------------------------------------+
            |?      |matches any single character     |
            +-----------------------------------------+
            |[seq]  |matches any character in seq     |
            +-----------------------------------------+
            |[!seq] |matches any character not in seq |
            +-----------------------------------------+
        Simple example:
            out.match(stdout='*success*')

        :param stdout: Pattern to search for in the list of stdout string
        :param stderr: Pattern to search for in the list of stderr string

        :raises MatchError: If the pattern is not found in the output
        """

        if stdout is not None:
            self._match(stdout, "stdout", self.stdout)

        if stderr is not None:
            self._match(stderr, "stderr", self.stderr)

    def _match(self, pattern, stream_name, output):
        """Matches the lines in the output with the pattern.

        :param pattern: Pattern to search for in the list of output string
        :param stream_name: The name of the stream to match against
        :param output: The output to match against
        """

        match_lines = fnmatch.filter(output.splitlines(), pattern)

        if len(match_lines) == 0:
            raise errors.MatchError(
                pattern=pattern, stream_name=stream_name, output=output
            )

    def __str__(self):
        """Print the RunResult object as a string"""
        run_string = (
            "RunResult\n"
            "command: {command}\n"
            "cwd: {cwd}\n"
            "returncode: {returncode}\n"
            "stdout: \n{stdout}"
            "stderr: \n{stderr}"
        )

        return run_string.format(
            command=self.command,
            cwd=self.cwd,
            returncode=self.returncode,
            stdout=self.stdout,
            stderr=self.stderr,
        )
